# -*- coding: utf-8 -*-
"""AulaPandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hVPtqnfk9psj-OyviP0TrNUWikgURo8g

# Introdução à Biblioteca Pandas
"""

#importando a biblioteca pandas
import pandas as pd

#Criando dateFrame para ler o arquivo csv
#sep = separador do etxto
df = pd.read_csv("/content/drive/MyDrive/Datasets/Gapminder.csv", error_bad_lines = False, sep = ";")

#Visualizando as 5 primeiras linhas
df.head()

df = df.rename(columns={"country": "Pais", "continent":"Continente", "year": "Ano", "lifeExp": "Expectativa de vida", "pop":"Pop Total", "gdpPercap":"PIB"})

df.head(10)

#Retorna total de linhas e colunas
df.shape

#Retorna coluna
df.columns

#retorna tipo de dado
df.dtypes

#Retorna as últimas linhas
df.tail()

df.describe()

df["Continente"].unique()

Oceania = df.loc[df["Continente"]== "Oceania"]
Oceania.head()

Oceania["Continente"].unique()

df.groupby("Continente")["Pais"].unique()

#Retorna a média
df.groupby("Ano")["Expectativa de vida"].mean()

df["PIB"].mean()

df["PIB"].sum()

"""# Trabalhando com Planilhas Excel

"""

import pandas as pd

df1= pd.read_excel("/content/drive/MyDrive/Datasets/Aracaju.xlsx")
df2= pd.read_excel("/content/drive/MyDrive/Datasets/Fortaleza.xlsx")
df3= pd.read_excel("/content/drive/MyDrive/Datasets/Natal.xlsx")
df4= pd.read_excel("/content/drive/MyDrive/Datasets/Recife.xlsx")
df5= pd.read_excel("/content/drive/MyDrive/Datasets/Salvador.xlsx")

#juntando todos os arquivos
df = pd.concat([df1,df2,df3,df4,df5])

#exibindo as 5 primeiras linhas
df.head()

df

#últimas 5 linhas
df.tail()

#Amostra Aleatória
df.sample(5)

#tipo de dado de cada coluna
df.dtypes

#Alterando o tipo de dado da coluna lojaID
df["LojaID"] = df["LojaID"].astype('object')

df.dtypes

df

"""#Valores Faltantes

"""

#Consultando linhas com valores faltantes
df.isnull().sum()

df["Vendas"].mean()

#substituir os valores por zero
df['Vendas'].fillna(0, inplace = True)

#Apagando as linhas com valores nulos
df.dropna(inplace = True)

#apagando as linhas com valores nulos com base em apenas uma coluna
df.dropna(subset=["Vendas"], inplace = True)

#Removendo 'linhas' que estejam com valores faltantes em todas as colunas
df.dropna(how='all',inplace =True)

"""#*Criando novas Colunas*"""

#Criando coluna de receitas
df["Receita"] = df["Vendas"].mul(df["Qtde"])

df.head()

df["Receita/Vendas"]= df['Receita']/ df['Vendas']

df.head()

#retornar maior receita
df['Receita'].max()

#retornar menor receita
df['Receita'].min()

#nlargest (maiores vendas top 3)
df.nlargest(3,"Receita")

#nsmallest
df.nsmallest(3, "Receita")

#agrupamento por cidade
df.groupby("Cidade")["Receita"].sum()

#Ordenando o conjunto de dados
df.sort_values("Receita", ascending= False).head(10)

"""#Trabalhando com Datas"""

#transformando a coluna de data em tipo inteiro
df["Data"] = df ["Data"].astype("int64")

#verificando o tipo de dado de cada coluna
df.dtypes

#transformando coluna de data em data
df["Data"] = pd.to_datetime(df["Data"])

df.dtypes

#Agrupamento por ano
df.groupby(df["Data"].dt.year)["Receita"].sum()

#criando uma coluna nova com o ano
df["Ano_Venda"] = df["Data"].dt.year

df.sample(5)

#extraindo o mês e o dia
df["mes_venda"], df["dia_venda"] = (df["Data"].dt.month, df["Data"].dt.day)

df.sample(5)

#retornando a data mais antiga
df["Data"].min()

#Calculando a diferença de dias
df["diferenca_dias"] = df["Data"] - df["Data"].min()

df.sample(5)

#criando uma coluna de trimestre
df["trimestre_vendas"] = df["Data"].dt.quarter

df.sample(5)

#filtrando as vendas de 2019 do mês de março
vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3 )]

vendas_marco_19

"""# Visualização de dados"""

df["LojaID"].value_counts(ascending = False)

#Gráfico de barras
df["LojaID"].value_counts(ascending = False).plot.bar()

#Gráfico de barras horizontais
df["LojaID"].value_counts(ascending = True).plot.barh();

#Gráfico de barras
df["LojaID"].value_counts().plot.bar();

#Gráfico de Pizza
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie()

#Total vendas por cidade
df["Cidade"].value_counts()

#Adicionando um título e alterando o nome dos eixos
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title="Total vendas por Cidade")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas");

#Alterando a cor 
df["Cidade"].value_counts().plot.bar(title = "Total vendas por Cidade", color = "red")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas")

#Alterando estilo
plt.style.use("ggplot")

df.groupby(df["mes_venda"])["Qtde"].sum().plot(title = "Total produto vendidos x mês")
plt.xlabel("Mês")
plt.ylabel("Total de Produtos Vendidos")
plt.legend()

df.groupby(df["mes_venda"])["Qtde"].sum()

#Selecionando apenas as vendas de 2019
df_2019 = df[df["Ano_Venda"] == 2019]

#Total produtos vendidos por mês
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos");
plt.legend();

#Histograma
plt.hist(df["Qtde"], color = "magenta");

plt.scatter (x=df_2019["dia_venda"], y = df_2019["Receita"]);

#Salvando em png
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.title("Quantidade de produtos vendidos x mês")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos"); 
plt.legend()
plt.savefig("grafico QTDE X MES.png")